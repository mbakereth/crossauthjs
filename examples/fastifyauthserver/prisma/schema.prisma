// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //output = "../src/generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
    id                  Int         @id @unique @default(autoincrement())
    username            String      @unique
    username_normalized  String      @unique
    email               String      @unique
    email_normalized     String      @unique
    factor1             String      @default("localpassword")
    factor2             String      @default("")
    state               String      @default("active")

    session             Key[]
    secrets             UserSecrets?
    authorization       OAuthAuthorization[]
    oauthClients        OAuthClient[]

    @@index([id])
    @@index([username])
}

model UserSecrets {
    userid             Int         @unique
    password            String
    totpsecret          String      @default("")

    user                User      @relation(references: [id], fields: [userid], onDelete: Cascade)
}

model Key {
    id             Int       @id @unique @default(autoincrement())
    value          String    @unique
    userid        Int?
    created        DateTime
    expires        DateTime
    data           String?
    user           User?     @relation(references: [id], fields: [userid], onDelete: Cascade)

    @@index([id])
    @@index([userid])
}

model OAuthClient {
    client_id       String                    @id @unique
    confidential   Boolean                   @default(true)
    client_name     String
    client_secret   String?
    userid        Int?

    redirect_uri    OAuthClientRedirectUri[]
    valid_flow      OAuthClientValidFlow[]
    authorization  OAuthAuthorization[]
    user           User?     @relation(references: [id], fields: [userid], onDelete: Cascade)

    @@index([client_id])
    @@index([userid])
}

model OAuthClientRedirectUri {
    id             Int         @id @unique @default(autoincrement())
    client_id      String 
    uri            String

    client         OAuthClient @relation(references: [client_id], fields: [client_id], onDelete: Cascade)

    @@index([id])
    @@unique([client_id, uri], name: "redirect_uriUnique")
    //@@unique([redirect_uri], name: "redirect_uriUnique") // use this to ensure only one client has any given redirect uri
}

model OAuthClientValidFlow {
    id             Int         @id @unique @default(autoincrement())
    client_id      String 
    flow           String

    client         OAuthClient @relation(references: [client_id], fields: [client_id], onDelete: Cascade)

    @@index([id])
    @@unique([client_id, flow], name: "flowUnique")
    //@@unique([redirect_uri], name: "redirect_uriUnique") // use this to ensure only one client has any given redirect uri
}


model OAuthAuthorization {ยง
    id             Int           @id @unique @default(autoincrement())
    client_id      String    
    userid        Int?
    user           User?         @relation(references: [id], fields: [userid], onDelete: Cascade)
    Client         OAuthClient?  @relation(references: [client_id], fields: [client_id], onDelete: Cascade)
    scope          String?

    @@index([id])
    @@index([client_id, userid])
    @@unique([client_id, userid, scope], name: "clientUserScope")
}

