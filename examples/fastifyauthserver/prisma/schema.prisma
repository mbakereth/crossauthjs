// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
    id                  Int         @id @unique @default(autoincrement())
    username            String      @unique
    usernameNormalized  String      @unique
    email               String      @unique
    emailNormalized     String      @unique
    factor1             String      @default("localpassword")
    factor2             String      @default("")
    state               String      @default("active")

    session             Key[]
    secrets             UserSecrets?
    authorization       OAuthAuthorization[]

    @@index([id])
    @@index([username])
}

model UserSecrets {
    user_id             Int         @unique
    password            String
    totpSecret          String      @default("")

    user                User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Key {
    id             Int       @id @unique @default(autoincrement())
    value          String    @unique
    user_id        Int?
    created        DateTime
    expires        DateTime
    data           String?
    user           User?     @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([id])
    @@index([user_id])
}

model OAuthClient {
    clientId       String                    @id @unique
    confidential   Boolean                   @default(true)
    clientName     String
    clientSecret   String?

    redirectUri    OAuthClientRedirectUri[]
    validFlow      OAuthClientValidFlow[]
    authorization  OAuthAuthorization[]

    @@index([clientId])
}

model OAuthClientRedirectUri {
    id             Int         @id @unique @default(autoincrement())
    client_id      String 
    uri            String

    client         OAuthClient @relation(references: [clientId], fields: [client_id], onDelete: Cascade)

    @@index([id])
    @@unique([client_id, uri], name: "redirectUriUnique")
    //@@unique([redirect_uri], name: "redirectUriUnique") // use this to ensure only one client has any given redirect uri
}

model OAuthClientValidFlow {
    id             Int         @id @unique @default(autoincrement())
    client_id      String 
    flow           String

    client         OAuthClient @relation(references: [clientId], fields: [client_id], onDelete: Cascade)

    @@index([id])
    @@unique([client_id, flow], name: "flowUnique")
    //@@unique([redirect_uri], name: "redirectUriUnique") // use this to ensure only one client has any given redirect uri
}


model OAuthAuthorization {ยง
    id             Int           @id @unique @default(autoincrement())
    client_id      String    
    user_id        Int?
    user           User?         @relation(references: [id], fields: [user_id], onDelete: Cascade)
    Client         OAuthClient?  @relation(references: [clientId], fields: [client_id], onDelete: Cascade)
    scope          String?

    @@index([id])
    @@index([client_id, user_id])
    @@unique([client_id, user_id, scope], name: "clientUserScope")
}

